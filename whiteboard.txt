MAX NUMBER
Find the largest integer in a list of integers.

For example:

>>> max_num([5, 3, 6, 2, 1])
6

concept: return the largest integer from the list without max_num
pseudocode:
create a max num variable and set to first number in the list
loop through list
if current number is greater than the max variable
update variable
return max num

def max_num(nums_list):
    max_num = nums_list[0]
    for num in nums_list:
        if num > max_num:
            max_num = num
    return max_num

----------------------
LARGEST SMALLER THAN

Given an ordered list of numbers and a number, return the index of the largest number in the list that is smaller than that number.

For example:

>>> find_largest_smaller_than([-5, -2, 8, 12, 32], 10)
2

>>> find_largest_smaller_than([-5, -2, 8, 12, 32], 33)
4

>>> find_largest_smaller_than([-5, -2, 8, 12, 32], -1)
1
Never find xnumber — it’s not smaller than itself!

>>> find_largest_smaller_than([-5, -2, 8, 12, 32], 8)
1
If no such number exists, return None:

>>> find_largest_smaller_than([-5, -2, 8, 12, 32], -10) is None
True

concept:
return the index of the number that is smaller and closest to second param

pseudocode:
keep track of result variable set to first index in list to start
variable to track index
loop through list with enumerate to track index and num
for each number in the list
if number is greater than variable AND less than param 2
then update variableof number and of index
return index

def find_largest_smaller_than(num_list, num):
    result_num = num_list[0]
    result_index = None
    for index, n in enumerate(num_list):
        if num > n > result_num:
            result_num = n
            result_index = index
    return result_index


------------------------------------
PRIME NUMBER
Write a function the returns True or False, depending on whether the integer passed into it is a prime number.

Only numbers >1 can be prime numbers:

>>> is_prime(0)
False

>>> is_prime(1)
False
Any number >1 that has no divisors other than 1 and itself is a prime number:

>>> is_prime(2)
True

>>> is_prime(3)
True

>>> is_prime(4)
False

>>> is_prime(11)
True

>>> is_prime(999)
False

pseudocode:
loop through numbers in range of 1 to num
if num modulo any num in loop == 0, return true
else return false

def is_prime_number(num):
    for n in range(2, (num // 2)):
        if num % n == 0:
            return False
    return True
-------------------
IS PALINDROME
Return True/False if this word is a palindrome. A palindrome is a word that is spelled the same backwards and forwards.

>>> is_palindrome("a")
True

>>> is_palindrome("noon")
True

>>> is_palindrome("racecar")
True

>>> is_palindrome("porcupine")
False
Treat spaces and uppercase letters normally—so “Racecar” wouldn’t be a palindrome since “R” and “r” aren’t the same letter:

>>> is_palindrome("Racecar")
False

concept:
return True if word is the same forwards and backwards
spaces and Uppercase behave normally

pseudocode:
need to find middle.
if odd number, note middle as will not repeat
if even, can divide exactly in half
will compare first half and second half of word
build letters of first 1/2 into a stack, for second half of word
pop off and compare.

def is_palindrome(word):
    length = len(word)
    stack = []
    if length % 2 != 0:
       middle = length // 2 + 1

    for index, char in enumerate(word):
        if length % 2 != 0:
            if index < middle:
                stack.append(char)
            else:
                if char == stack[-1]:
                    stack.pop()
                else:
                    return False
        else:
            if index <= length // 2:
                stack.append(char)
            else: 
                if char == stack[-1]:
                    stack.pop()
                else:
                    return False
    return True
    



--------------------------------
AS UNIQUE CHARACTERS - Hackbright

Given a word, return True if that word contains only unique characters. Return False otherwise.

>>> has_unique_chars("Monday")
True

>>> has_unique_chars("Moonday")
False

>>> has_unique_chars("")
True
Uppercase and lowercase letters should be considered separately:

>>> has_unique_chars("Bob")

concept:
return boolean if a word has all unique characters.  
Upper and lower count as different characters

pseudocode: 
create empty set for characters
loop over characters in word
    if character is not in set
        add to set and continue
    if character is in set
        return False
return True at the end if loop has not been broken

code:

def has_unique_chars(word):
    char_set = set([])
    for char in word:
        if char not in char_set:
            char_set.add(char)
        else:
            return False
    return True

_________________________
DAYS IN MONTH - Hackbright
Given a string with a month and a year (separated by a space), return the number of days in that month.

Leap years are a bit tricky. A year is a leap year if and only if:

it is evenly divisible by 4

except if it is divisible by 100, in which case it isn’t

except if it is divisible by 400, in which case it is

So, for example, 1904 was a leap year. 1900 is divisible by 100, so it wasn’t. 2000 is divisible by 400, so it was.

concept:
given a month and year as a string.  determine how many days in that month

pseuodocode:
first step: convert the string to 2 integers, month and year
split stringto a list on the space
now index 0 is month and index 1 is year
second step: write function to handle leap year
if number is divisble by 400 then
    return leap is True
else if number is divisible by 100 then
    return leap is false
else if number is divisible by 4 then
    return leap is true
else
    return leap is false
this function can be plugged into days_in_month function
days_in_month
make dictionary for months and days excluding february
if month equals 2 then
    leap variable equals run of leap year function
    if return equals true
        return 29
    if return equals false
        return 28
if month doesnt equal 2 then
    check dictionary for month key
        return value

def is_leap_year(year):
    if year % 400 == 0:
        return True
    elif year % 100 == 0:
        return False
    elif year % 4 == 0:
        return True
    else:
        return False


def days_in_month(date):
    """How many days are there in a month?"""
    months_not_feb = {1: 31, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31,
                8: 31, 9: 30, 10: 31, 11:30, 12: 31}
    month_year = date.split()
    month = int(month_year[0])
    year = int(month_year[1])
    if month == 2:
        leap = is_leap_year(year)
        if leap == True:
            return 29
        else:
            return 28
    else:
        return months_not_feb[month]
------------------------
ADD TO ZERO - Hackbright
Given list of ints, return True if any two nums in list sum to 0.

>>> add_to_zero([])
False

>>> add_to_zero([1])
False

>>> add_to_zero([1, 2, 3])
False

>>> add_to_zero([1, 2, 3, -2])
True

concept:
return true if 2 nums in an array add to zero
otherwise return false

pseudocode:
nums will add to zero if there is a negative and a positive of any number in the array
make set of array
loop through set
for each number in set
    if opposite of number in set
        return true

def add_to_zero(num_list):
    num_set = set(num_list)
    for num in num_set:
        if (num * - 1) in num_set:
            return True
    return False
--------------------
Given a word in English, return True if that word contains more vowels than non-vowels; otherwise, return False. The word will always be a single word, without any punctuation or spaces. It will contain only uppercase and lowercase letters.

If the phrase is over half vowels, it should return True:

>>> has_more_vowels("moose")
True
If it’s half vowels (or less), it’s false:

>>> has_more_vowels("mice")
False

>>> has_more_vowels("graph")
False

concept: 
check if a word has more than 1/2 vowels
y is not a vowel
word will have letters only (no punctuation)
word can have upper and lower case

pseudocode:
create set of vowels
set variable to length of word
count variable set to zero
iterate through characters of word
if character (lower case) is in vowel set then
add 1 to the count
check if count is greater than length divided by 2
if yes, return True, else return False

def over_half_vowels(word):
    vowels = {'a', 'e', 'i', 'o', 'u'}
    vowel_count = 0
    for char in word:
        if char.lower() in vowels:
            vowel_count += 1
    if vowel_count > len(word) / 2:
        return True
    else: 
        return False
----------------------
Reverse a list in-place. Remember, for this to be “in-place” it can only use a small, constant amount of extra storage space, so no duplicating the list!

For example:

>>> lst = [1, 2, 3]
>>> rev_list_in_place(lst)
>>> lst
[3, 2, 1]
**     You cannot do this with reversed(), .reverse(), or list slice

concept:
Reverse the list IN place
no duplicating the list

pseudocode:
call list.sort with reverse=true

def rev_list_in_place(lst):
    lst.sort(reverse=True)
-----------------------------------
Write a function, find_longest_word, that takes a list of words and returns the length of the longest one.

>>> find_longest_word(["hi", "hello"])
5

>>> find_longest_word(["Balloonicorn", "Hackbright"])
12

concept:
Taking in a list of words
Returning an integer
return the length of the longest word in the list

pseudocode:
create a variable to store the length of longest word
iterate through the list
check the length of each word
if the length is longer than current varaible value, update variable
return longest word variable

def find_longest_word(list_of_words):
    longest = 0
    for word in list_of_words:
        if len(word) > longest:
            longest = len(word)
    return longest

--------------------------------------
Compute the sum of a list of numbers.

For example:

>>> sum_list([5, 3, 6, 2, 1])
17

pseudo code:
can use sum function within python 
or without using helper functions:
create counter variable
iterate through list
for each item in the list
    add the item to the counter
return the counter

def sum_list(num_list):
    return sum(num_list)

or:

def sum_list(num_list):
    result = 0
    for num in num_list:
        result += num
    return result