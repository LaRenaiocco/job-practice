Given list of ints, return True if any two nums in list sum to 0.

>>> add_to_zero([])
False

>>> add_to_zero([1])
False

>>> add_to_zero([1, 2, 3])
False

>>> add_to_zero([1, 2, 3, -2])
True

concept:
return true if 2 nums in an array add to zero
otherwise return false

pseudocode:
nums will add to zero if there is a negative and a positive of any number in the array
make set of array
loop through set
for each number in set
    if opposite of number in set
        return true

def add_to_zero(num_list):
    num_set = set(num_list)
    for num in num_set:
        if (num * - 1) in num_set:
            return True
    return False
--------------------
Given a word in English, return True if that word contains more vowels than non-vowels; otherwise, return False. The word will always be a single word, without any punctuation or spaces. It will contain only uppercase and lowercase letters.

If the phrase is over half vowels, it should return True:

>>> has_more_vowels("moose")
True
If it’s half vowels (or less), it’s false:

>>> has_more_vowels("mice")
False

>>> has_more_vowels("graph")
False

concept: 
check if a word has more than 1/2 vowels
y is not a vowel
word will have letters only (no punctuation)
word can have upper and lower case

pseudocode:
create set of vowels
set variable to length of word
count variable set to zero
iterate through characters of word
if character (lower case) is in vowel set then
add 1 to the count
check if count is greater than length divided by 2
if yes, return True, else return False

def over_half_vowels(word):
    vowels = {'a', 'e', 'i', 'o', 'u'}
    vowel_count = 0
    for char in word:
        if char.lower() in vowels:
            vowel_count += 1
    if vowel_count > len(word) / 2:
        return True
    else: 
        return False
----------------------
Reverse a list in-place. Remember, for this to be “in-place” it can only use a small, constant amount of extra storage space, so no duplicating the list!

For example:

>>> lst = [1, 2, 3]
>>> rev_list_in_place(lst)
>>> lst
[3, 2, 1]
**     You cannot do this with reversed(), .reverse(), or list slice

concept:
Reverse the list IN place
no duplicating the list

pseudocode:
call list.sort with reverse=true

def rev_list_in_place(lst):
    lst.sort(reverse=True)
-----------------------------------
Write a function, find_longest_word, that takes a list of words and returns the length of the longest one.

>>> find_longest_word(["hi", "hello"])
5

>>> find_longest_word(["Balloonicorn", "Hackbright"])
12

concept:
Taking in a list of words
Returning an integer
return the length of the longest word in the list

pseudocode:
create a variable to store the length of longest word
iterate through the list
check the length of each word
if the length is longer than current varaible value, update variable
return longest word variable

def find_longest_word(list_of_words):
    longest = 0
    for word in list_of_words:
        if len(word) > longest:
            longest = len(word)
    return longest

--------------------------------------
Compute the sum of a list of numbers.

For example:

>>> sum_list([5, 3, 6, 2, 1])
17

pseudo code:
can use sum function within python 
or without using helper functions:
create counter variable
iterate through list
for each item in the list
    add the item to the counter
return the counter

def sum_list(num_list):
    return sum(num_list)

or:

def sum_list(num_list):
    result = 0
    for num in num_list:
        result += num
    return result